#!/bin/bash

##############################################################################
# git-multi-st
# Show the status of multiple git repos
# Version             : 0.1

# TODO:
#   - this really could use some color

# shellcheck disable=SC2034
THIS_SCRIPT_NAME='git-multi-st'
# shellcheck disable=SC2034
THIS_SCRIPT_VERSION='0.1'

declare -g DEPTH=3 COLUMN_WIDTH=60
declare -ga TARGETS=()

##############################################################################

# Display error message and return error code
# Use like this:
#   error 23 "My special error" || return $?
error() {
    declare code="$1"; shift
    declare message="$1"; shift
    printf "ERROR %03d: %s\n" "$code" "$message" 1>&2
    return "$code"
}

##############################################################################

help() {
    echo ""
    echo "$THIS_SCRIPT_NAME - show repositories status v$THIS_SCRIPT_VERSION"
    echo ""
    echo "Usage:"
    printf "    %s [--depth n] [starting-point...]\n" "$THIS_SCRIPT_NAME"
    echo ""
    echo "Options:"
    printf "    %-20s %s\n" "--depth"   "Maximum depth to search directories recursively,"
    printf "    %-20s %s\n" ""          "defaults to 3"
    echo ""
}

get-clean-status() {
    declare temp
    temp="$(git status --porcelain)" \
        || { error 1 "git status failed"; return 1; }
    if [[ -n "$temp" ]] ; then
        echo uncommitted
    else
        echo ""
    fi
}

get-sync-status() {
    git status | grep '^Your branch' | grep -oP '(?<=is ).*(?= with)'
    if [[ "${PIPESTATUS[0]}" -ne 0 ]] ; then
        error 1 "git status failed"
        return 1
    fi
    true
}

print-git-status() {
    declare target="$1"
    # Note: This sadly has to rely on a subshell
    (
        declare err branch clean sync
        printf "%-${COLUMN_WIDTH}s: " "$target"
        cd "$target" || {
            err="$?"
            echo "ERROR: Inaccessible ($err)"
            return "$err"
        }
        branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "?")"
        clean="$(get-clean-status)" || return "$?"
        sync="$(get-sync-status)" || return "$?"
        printf "%-44s %-12s %-40s\n" \
            "$branch" \
            "$clean" \
            "$sync"
    )
}

main() {

    # Parse arguments
    while [[ $# -gt 0 ]] ; do
        case "$1" in
        --maxdepth|--depth)
            shift; DEPTH="$1"; shift
            ;;
        -c|--cw|--column-width)
            # TODO: undocumented
            shift; COLUMN_WIDTH="$1"; shift
            ;;
        -*)
            error 1 "Unknown option: $1" || true
            echo "    ... here's the help:" 1>&2
            help
            return 1
            ;;
        *)
            TARGETS+=( "$1" ); shift
            ;;
        esac
    done

    # Without targets, assume either "$PRJ_ROOT" or "."
    if [[ "${#TARGETS}" -eq 0 ]] ; then
        if [[ -n "$PRJ_ROOT" ]] ; then
            TARGETS=( "$PRJ_ROOT" )
        else
            TARGETS=( . )
        fi
    fi

    for i in $(list-git-repos --depth "$DEPTH" "${TARGETS[@]}") ; do
        print-git-status "$i"
    done
}

main "$@"
