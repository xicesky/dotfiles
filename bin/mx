#!/bin/bash
# shortcuts for work / ssh into mobilex notebook

#MOBILEX_HOST=${MOBILEX_HOST:-192.168.128.32}
MOBILEX_HOST=${MOBILEX_HOST:-dangl-lnx}
MOBILEX_HOME="/home/dangl@mobileX.intra"

################################################################################
# Basic utils (shortened version): mostly verbosity, command logging
# Note: Shortened version

# Display a message if verbosity level allows
VERBOSITY="${VERBOSITY:-1}"
log() {
    local level="$1"; shift
    if [[ "$VERBOSITY" -ge "$level" ]] ; then echo "$*" 1>&2; fi
}

# Stores the last command executed by invoke() and it's exit code
declare -ga LAST_COMMAND
declare -g LAST_COMMAND_EXITCODE
LAST_COMMAND=()
LAST_COMMAND_EXITCODE=0

# Log and invoke a command
# This actually works only for simple commands, you can't use it to:
#   - Invoke commands that use pipes or redirections
#   - Invoke compound commands (expressions)
#   - Set variables
invoke() {
    local redir="" loglevel=2
    while [[ $# -gt 0 ]] ; do
        case "$1" in
            "-o")   shift; redir="$1"; shift ;;
            "-l")   shift; loglevel="$1"; shift ;;
            "--")   shift; break ;;
            -*)     echo "invoke: Unknown flag: $arg" 1>&2; return 1 ;;
            *)      break ;;
        esac
    done
    LAST_COMMAND=("$@")
    log "$loglevel" "$(printf "%q " "$@")${redir:+ >$redir}"
    LAST_COMMAND_EXITCODE=0
    if [[ -z "$redir" ]] ; then "$@"; else "$@" >"$redir"; fi
    LAST_COMMAND_EXITCODE="$?"
    return $LAST_COMMAND_EXITCODE
}

# Report the last command, if it failed
report_command_failure() {
    if [[ "$LAST_COMMAND_EXITCODE" -ne 0 ]] ; then
        log 1 "Last command executed:"
        log 1 "    $(printf "%q " "${LAST_COMMAND[@]}")"
        log 1 "Returned exit code ${LAST_COMMAND_EXITCODE}"
    fi
}

which() { type -P "$@"; }

################################################################################

win_posh() {
    declare poshcmd="$1"; shift
    # FIXME: This will have problems if the arguments themselves contain double quotes
    while [[ $# -gt 0 ]] ; do poshcmd="$poshcmd \"$1\""; shift; done
    (
        # Avoid warning about cmd.exe by cding to a windows directory
        cd "$(readlink -f ~/win-home)"
        invoke powershell.exe -Command "${poshcmd}"
    )
}

# Launch host's vs code
win_code() {
    win_posh code "$@"
}

################################################################################
# Main, argparsing and commands

cmd_ssh() {
    if [[ $# -eq 0 ]] ; then
        invoke ssh -t "$MOBILEX_HOST" "/usr/bin/zsh -l"
    else
        invoke ssh "$MOBILEX_HOST" "$@"
    fi
}

cmd_rdp() {
    invoke remmina
}

cmd_code() {
    local target="${1:-Notes}"
    if [[ target != /* ]] ; then
        # Make path absolute
        target="$MOBILEX_HOME/$target"
    fi
    win_code --folder-uri "vscode-remote://ssh-remote+$MOBILEX_HOST$target"
}

cmd_notes() {
    win_code "$(wslpath -wa ~/win-home/Desktop/dangl-lnx-Notes.code-workspace)"
}

cmd_chrome() {
    # We don't want to block background processes because of terminal output
    #stty -tostop
    # but it's simpler just to redirect to stderr
    cmd_ssh "google-chrome" "$@" 1>&2
}

cmd_keepass() {
    cmd_ssh "keepassxc" "$@"
}

cmd_idea() {
    declare -a args=( "$@" )
    if [[ $# -eq 1 && "$1" =~ [:alnum:] ]] ; then
        args=( "$MOBILEX_HOME/Dev/mobilex/$1" )
    fi
    cmd_ssh "$MOBILEX_HOME/bin/idea" "${args[@]}"
}

cmd_vm() {
    declare cmd="start" vmname="win11" cmderr=0 argn=-1
    while [[ $# -gt 0 ]] ; do
        arg="$1"; shift
        case "$arg" in
            -*)
                { echo "Unknown flag: $arg"; usage; } 1>&2
                return 1
                ;;
            *)
                (( argn++ ))
                case "$argn" in
                    0) cmd="$arg" ;;
                    1) vmname="$arg" ;;
                    *)
                        { echo "Too many arguments: $arg"; usage; } 1>&2
                        return 1
                esac
                ;;
        esac
    done
    case "$cmd" in
        start|stop) cmd_ssh virsh --connect=qemu:///system "$cmd" "$vmname" ;;
        list) cmd_ssh virsh --connect=qemu:///system list --all ;;
        *) echo "Unknown command: $cmd" 1>&2; return 1 ;;
    esac
}

cmd_initial() {
    #cmd_notes &

    local session="mx-initial"
    if ! tmux list-sessions | grep -q "$SESSION" ; then
        # Start New Session with our name
        tmux new-session -d -s "$session"

        # Name first Window and start zsh
        tmux rename-window -t "$session:1" 'Main'
        tmux send-keys -t 'Main' 'mx code' C-m

        # Create new pane for remmina
        tmux new-window -t "$session:2" -n 'Remmina'
        tmux send-keys -t 'Remmina' 'mx rdp' C-m

        # Create new pane for chrome
        tmux new-window -t "$session:3" -n 'Chrome'
        tmux send-keys -t 'Chrome' 'mx chrome' C-m

        # Create new pane for idea
        tmux new-window -t "$session:4" -n 'Idea'
        tmux send-keys -t 'Idea' 'mx idea' C-m
    fi

    # Attach Session, on the Main window
    tmux attach-session -t "$session:1"
}

cmd_help() {
    usage
}

usage() {
    echo "Usage: $0 [global flags...] <command...>"
    echo "Global flags:"
    echo "    -v      Increase verbosity level"
    echo "    -q      Decrease verbosity level"
    echo "    --help  Show usage and exit"
    echo ""
    echo "Available commands:"
    echo "    help            Show usage and exit"
    echo "    ssh             ssh into mobilex notebook with the correct shell"
    echo "    rdp             Launch remmina for rdp"
    echo "    code            Launch vs code with a remote ssh session. A target directory can be specified, it defaults to ~/Notes."
    echo "    chrome          Launch chrome on the remote (via ssh x-forwarding)."
    echo "    idea            Launch idea on the remote (via ssh x-forwarding)."
    echo "    initial / init  Start common programs in a tmux session (vs code, remmina, chrome, idea)"
    echo "    "
    echo ""
    echo "If no command is specified, the default command (\"ssh\") is used."
    echo ""
}

main() {
    declare cmd="ssh" cmderr=0
    while [[ $# -gt 0 ]] ; do
        arg="$1"; shift
        case "$arg" in
            -v) (( VERBOSITY++ )) ;;
            -q) (( VERBOSITY-- )) ;;
            --help)
                cmd=help
                break
                ;;
            -*)
                { echo "Unknown flag: $arg"; usage; } 1>&2
                return 1
                ;;
            in*) cmd="initial"; break ;;
            kee*) cmd="keepass"; break ;;
            *)
                cmd="$arg"
                break
                ;;
        esac
    done
    if [[ -z "$cmd" ]] ; then
        usage
    elif [[ $(type -t "cmd_$cmd") == function ]] ; then
        "cmd_$cmd" "$@"
        cmderr="$?"
        if [[ "$cmderr" -ne 0 && "$LAST_COMMAND_EXITCODE" -ne 0 ]] ; then
            report_command_failure 1>&2
            echo "" 1>&2
        fi
        return "$cmderr"
    else
        { echo "Unknown command: $cmd"; usage; } 1>&2
        return 1
    fi
}

main "$@"
