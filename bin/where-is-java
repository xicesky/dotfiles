#!/bin/bash
# ATTENTION: This is still highly windows-centric, i'd like to completely rewrite it.

declare -g JAVAHOME BINJAVA JAVA_HOME JAVA_VERSION
declare -g FIX_PATH=false LIST_ALL=false
declare -ga JAVA_SUSPECTS=()
declare -g SCOOP_APPS_DIR=""
# Note: JAVAHOME is the msys path to JAVA_HOME

# # Sadly, scoop is too dumb to have multiple versions of the same jdk
# # (e.g. temurin11-jdk@11.0.17-8, temurin11-jdk@11.0.18-10)
# # So i didn't finish this.
# check-scoop-java() {
#     # For checking available versions, we first need the "set of java apps"
#     scoop list temurin | grep -oP '^temurin\S+' | sort -u
#
#     # Then we'd have to parse this mess for versions
#     scoop info temurin11-jdk
#
#     # Or just search the parent dir of the "current" prefix
#     ls "$(cygpath -ua "$(scoop prefix temurin11-jdk)/..")"
# }

to-windows-path() {
    echo "$1"
}

to-unix-path() {
    echo "$1"
}

if type -P cygpath >/dev/null ; then
    to-windows-path() {
        cygpath --windows "$1"
    }
    to-unix-path() {
        cygpath --unix "$1"
    }
fi

load-java-suspects() {
    declare pgf
    JAVA_SUSPECTS=()
    if type -P cygpath >/dev/null ; then
        pgf="$(cygpath -au "$PROGRAMFILES")"
        JAVA_SUSPECTS+=(
            "$pgf/Eclipse Foundation"
            "$pgf/Eclipse Adoptium"
            "$pgf/AdoptOpenJDK"
            "$pgf/Java"
        )
        if type -P scoop >/dev/null ; then
            # FIXME: Extend to temurin.*, then check all variants
            if scoop list temurin11-jdk | grep -qP '^temurin\S+' ; then
                SCOOP_APPS_DIR="$(cygpath -ua "$(scoop prefix temurin11-jdk)/..")"
            fi
        fi
    fi
    if [[ -d /usr/lib/jvm ]] ; then
        JAVA_SUSPECTS+=(
            /usr/lib/jvm
        )
    fi
}

find-all-java-installs() {
    if [ -d "$SCOOP_APPS_DIR" ] ; then
        find \
            "$SCOOP_APPS_DIR" \
            -mindepth 1 -maxdepth 1 -type d,l \
            \(  -iname "$JAVA_VERSION*" \
            -o  -iname "$JAVA_VERSION_ALT*" \
            \) \
            -printf "%f|%p\n" \
            2>/dev/null
    fi
    if [[ "${#JAVA_SUSPECTS[@]}" -gt 0 ]] ; then
        find \
            "${JAVA_SUSPECTS[@]}" \
            -mindepth 1 -maxdepth 1 -type d,l \
            \(  -iname "jdk-$JAVA_VERSION*" \
            -o  -iname "jdk$JAVA_VERSION*" \
            -o  -iname "jdk-$JAVA_VERSION_ALT*" \
            -o  -iname "jdk$JAVA_VERSION_ALT*" \
            -o  -iname "java-$JAVA_VERSION-openjdk-*" \
            \) \
            -printf "%f|%p\n" \
            2>/dev/null \
            | grep -oPe '\d.*' | tr '+' '-'
    fi
}

find-java() {
    # If JAVA_VERSION is set, look for that version exactly
    if [[ -n "$JAVA_VERSION" ]] ; then
        declare result
        # Look through common paths
        load-java-suspects
        result="$(
            find-all-java-installs \
                | sort -rV \
                | head -n 1 \
                | cut -f2 -d'|'
        )"
        if [[ -z "$result" ]] ; then
            echo "No jdk matches jdk-$JAVA_VERSION" 1>&2
            return 1
        else
            JAVAHOME="$result"
            BINJAVA="$JAVAHOME/bin/java"
            if [[ -x "$BINJAVA" ]] ; then
                JAVA_HOME="$(to-windows-path "$JAVAHOME")"
                return 0
            fi
        fi
    fi

    # Guess from JAVA_HOME
    if [[ -n "$JAVA_HOME" ]] ; then
        JAVAHOME="$(to-unix-path "$JAVA_HOME")"
        BINJAVA="$JAVAHOME/bin/java"
        if [[ -x "$BINJAVA" ]] ; then
            JAVA_HOME="$(to-windows-path "$JAVAHOME")"
            return 0
        fi
    fi
    
    # Locate java via path
    BINJAVA="$(which java)"

    if [[ -x "$BINJAVA" ]] ; then
        # Just ask java for java.home
        JAVAHOME="$("$BINJAVA" -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home' | sed 's/^.*= \?\(.*\)/\1/')"
        JAVAHOME="$(to-unix-path "$JAVAHOME")"
        
        if [[ -d "$JAVAHOME" ]] ; then
            JAVA_HOME="$(to-windows-path "$JAVAHOME")"
            return 0
        fi
    fi

    # Fail
    return 1
}

list-java-search-dirs() {
    declare i
    echo "Search paths:"
    load-java-suspects
    for i in "${JAVA_SUSPECTS[@]}" ; do
        echo "    $i"
    done
}

list-java-installs() {
    load-java-suspects
    find-all-java-installs | sort -rV
}

quote() {
    # shellcheck disable=SC2046,SC2005
    echo $(printf "%q " "$@")
}

JAVA_VERSION_ALT="PLS_NEVER_MATCH_ANYTHING"

while [[ $# -gt 0 ]] ; do
    case "$1" in
    --fix-path)
        FIX_PATH=true; shift
        ;;
    --list)
        LIST_ALL=true; shift
        ;;
    -*)
        echo "Unknown option: $1" 1>&2
        exit 1
        ;;
    *)
        break
        ;;
    esac
done

if [[ -n "$1" ]] ; then
    JAVA_VERSION="$1"
fi

if [[ "$JAVA_VERSION" == jdk* ]] ; then
    echo "WARNING: Java version was specified with a prefix: $JAVA_VERSION" 1>&2
    echo "    Please omit the prefix and just pass the version number." 1>&2
    JAVA_VERSION=${JAVA_VERSION#jdk-}
    JAVA_VERSION=${JAVA_VERSION#jdk}
    echo "    (Like this: $JAVA_VERSION)" 1>&2
fi

if [[ "$JAVA_VERSION" == *"+"* ]] ; then
    JAVA_VERSION_ALT="$JAVA_VERSION"
    JAVA_VERSION="$(echo "$JAVA_VERSION_ALT" | tr '+' '.')"
    echo "DEBUG: Alternate version number: $JAVA_VERSION_ALT" 1>&2
fi

if $LIST_ALL ; then
    #list-java-search-dirs
    list-java-installs
elif find-java ; then
    quote export JAVAHOME="$JAVAHOME"
    quote export JAVA_HOME="$(to-windows-path "$JAVAHOME")"
    quote export BINJAVA="$BINJAVA"
    if $FIX_PATH ; then
        newpath="$(echo "$PATH" | tr ':' '\n' | grep -v jdk | tr '\n' ':')$JAVAHOME/bin"
        quote PATH="$newpath"
    fi
else
    echo "Could not find java" 1>&2
    echo "false"
    exit 1
fi
