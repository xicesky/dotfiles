#!/bin/bash

declare -g JAVAHOME BINJAVA JAVA_HOME JAVA_VERSION
declare -g FIX_PATH=false
# Note: JAVAHOME is the msys path to JAVA_HOME

find-java() {
    # If JAVA_VERSION is set, look for that version exactly
    if [[ -n "$JAVA_VERSION" ]] ; then
        declare pgf result
        # Look through common paths
        pgf="$(cygpath -au "$PROGRAMFILES")"
        result="$(
            find \
                "$pgf/Eclipse Foundation" \
                "$pgf/Eclipse Adoptium" \
                "$pgf/AdoptOpenJDK" \
                "$pgf/Java" \
                -maxdepth 1 -type d,l \
                \(  -iname "jdk-$JAVA_VERSION*" \
                -o  -iname "jdk$JAVA_VERSION*" \
                -o  -iname "jdk-$JAVA_VERSION_ALT*" \
                -o  -iname "jdk$JAVA_VERSION_ALT*" \
                \) \
                -printf "%f|%p\n" \
                2>/dev/null \
                |  sort -rV \
                | head -n 1 \
                | cut -f2 -d'|'
        )"
        if [[ -z "$result" ]] ; then
            echo "No jdk matches jdk-$JAVA_VERSION" 1>&2
            return 1
        else
            JAVAHOME="$result"
            BINJAVA="$JAVAHOME/bin/java"
            if [[ -x "$BINJAVA" ]] ; then
                JAVA_HOME="$(cygpath --windows "$JAVAHOME")"
                return 0
            fi
        fi
    fi

    # Guess from JAVA_HOME
    if [[ -n "$JAVA_HOME" ]] ; then
        JAVAHOME="$(cygpath --unix "$JAVA_HOME")"
        BINJAVA="$JAVAHOME/bin/java"
        if [[ -x "$BINJAVA" ]] ; then
            JAVA_HOME="$(cygpath --windows "$JAVAHOME")"
            return 0
        fi
    fi
    
    # Locate java via path
    BINJAVA="$(which java)"

    if [[ -x "$BINJAVA" ]] ; then
        # Just ask java for java.home
        JAVAHOME="$("$BINJAVA" -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home' | sed 's/^.*= \?\(.*\)/\1/')"
        JAVAHOME="$(cygpath --unix "$JAVAHOME")"
        
        if [[ -d "$JAVAHOME" ]] ; then
            JAVA_HOME="$(cygpath --windows "$JAVAHOME")"
            return 0
        fi
    fi

    # Fail
    return 1
}

quote() {
    # shellcheck disable=SC2046,SC2005
    echo $(printf "%q " "$@")
}

JAVA_VERSION_ALT="PLS_NEVER_MATCH_ANYTHING"

while [[ $# -gt 0 ]] ; do
    case "$1" in
    --fix-path)
        FIX_PATH=true; shift
        ;;
    -*)
        echo "Unknown option: $1" 1>&2
        exit 1
        ;;
    *)
        break
        ;;
    esac
done

if [[ -n "$1" ]] ; then
    JAVA_VERSION="$1"
fi

if [[ "$JAVA_VERSION" == jdk* ]] ; then
    echo "WARNING: Java version was specified with a prefix: $JAVA_VERSION" 1>&2
    echo "    Please omit the prefix and just pass the version number." 1>&2
    JAVA_VERSION=${JAVA_VERSION#jdk-}
    JAVA_VERSION=${JAVA_VERSION#jdk}
    echo "    (Like this: $JAVA_VERSION)" 1>&2
fi

if [[ "$JAVA_VERSION" == *"+"* ]] ; then
    JAVA_VERSION_ALT="$JAVA_VERSION"
    JAVA_VERSION="$(echo "$JAVA_VERSION_ALT" | tr '+' '.')"
    echo "DEBUG: Alternate version number: $JAVA_VERSION_ALT" 1>&2
fi

if find-java ; then
    quote JAVAHOME="$JAVAHOME"
    quote JAVA_HOME="$(cygpath --windows "$JAVAHOME")"
    quote BINJAVA="$BINJAVA"
    if $FIX_PATH ; then
        newpath="$(echo "$PATH" | tr ':' '\n' | grep -v jdk | tr '\n' ':')$JAVAHOME/bin"
        quote PATH="$newpath"
    fi
else
    echo "Could not find java" 1>&2
    echo "false"
    exit 1
fi
